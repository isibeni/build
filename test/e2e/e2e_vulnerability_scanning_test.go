// Copyright The Shipwright Contributors
//
// SPDX-License-Identifier: Apache-2.0

package e2e_test

import (
	"fmt"
	"os"
	"strings"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/utils/pointer"

	buildv1alpha1 "github.com/shipwright-io/build/pkg/apis/build/v1alpha1"
)

var _ = Describe("Vulnerability Scanning", func() {
	var testID string
	var err error
	var buildRun *buildv1alpha1.BuildRun
	var insecure bool

	AfterEach(func() {
	})

	Context("Scanning for vulnerabilities in container images", func() {
		var outputImage string

		BeforeEach(func() {
			testID = generateTestID("vuln")
			outputImage = fmt.Sprintf("%s/%s:%s",
				os.Getenv(EnvVarImageRepo),
				testID,
				"latest",
			)

			// Assume we use secure registry unless it is a cluster
			// internal registry used as part of the test setup
			insecure = strings.Contains(outputImage, "cluster.local")
		})

		It("should find vulnerabilities in an image", func() {
			NewClusterBuildStrategyPrototype().
				Name("crane-pull-" + testID).
				BuildStep(buildv1alpha1.BuildStep{
					Container: corev1.Container{
						Name:       "crane-pull",
						Image:      "gcr.io/go-containerregistry/crane:latest",
						WorkingDir: "$(params.shp-source-root)",
						SecurityContext: &corev1.SecurityContext{
							RunAsUser:  pointer.Int64(1000),
							RunAsGroup: pointer.Int64(1000),
						},
						Env: []corev1.EnvVar{
							corev1.EnvVar{Name: "DOCKER_CONFIG", Value: "/tekton/home/.docker"},
							corev1.EnvVar{Name: "HOME", Value: "/tekton/home"},
						},
						Command: []string{"crane"},
						Args: []string{
							"pull",
							"--format=oci",
							"python:3.4-alpine",
							"$(params.shp-output-directory)",
						},
					},
				}).
				TestMe(func(cbs *buildv1alpha1.ClusterBuildStrategy) {
					buildRun, err = NewBuildRunPrototype().
						Namespace(testBuild.Namespace).
						Name(testID).
						WithBuildSpec(NewBuildPrototype().
							ClusterBuildStrategy(cbs.Name).
							Namespace(testBuild.Namespace).
							Name(testID).
							OutputImage(outputImage).
							OutputImageCredentials(os.Getenv(EnvVarImageRepoSecret)).
							OutputImageInsecure(insecure).
							BuildSpec()).
						Create()
					Expect(err).ToNot(HaveOccurred())
					defer testBuild.DeleteBR(buildRun.Name)

					buildRun = validateBuildRunToSucceed(testBuild, buildRun)
					Expect(err).ToNot(HaveOccurred())
					Expect(buildRun).ToNot(BeNil())
					Expect(buildRun.Status).ToNot(BeNil())
					Expect(buildRun.Status.Output).ToNot(BeNil())

					Expect(buildRun.Status.Output.Vulnerabilities).ToNot(BeNil())
					Expect(len(buildRun.Status.Output.Vulnerabilities)).ToNot(BeZero())
				})
		})
	})
})
