// Copyright The Shipwright Contributors
//
// SPDX-License-Identifier: Apache-2.0

package e2e_test

import (
	"fmt"
	"os"
	"strings"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	buildv1alpha1 "github.com/shipwright-io/build/pkg/apis/build/v1alpha1"
)

var _ = Describe("Vulnerability Scanning", func() {
	var testID string
	var err error
	var buildRun *buildv1alpha1.BuildRun
	var insecure bool

	AfterEach(func() {
	})

	Context("Scanning for vulnerabilities in container images", func() {
		var outputImage string

		BeforeEach(func() {
			testID = generateTestID("vuln")
			outputImage = fmt.Sprintf("%s/%s:%s",
				os.Getenv(EnvVarImageRepo),
				testID,
				"latest",
			)

			insecure = false
			if strings.Contains(outputImage, "cluster.local") {
				insecure = true
			}
		})

		It("should find vulnerabilities in an image", func() {
			buildRun, err = NewBuildRunPrototype().
				Namespace(testBuild.Namespace).
				Name(testID).
				WithBuildSpec(NewBuildPrototype().
					ClusterBuildStrategy("crane-pull").
					Namespace(testBuild.Namespace).
					Name(testID).
					OutputImage(outputImage).
					OutputImageCredentials(os.Getenv(EnvVarImageRepoSecret)).
					OutputImageInsecure(insecure).
					BuildSpec()).
				Create()
			Expect(err).ToNot(HaveOccurred())

			buildRun = validateBuildRunToSucceed(testBuild, buildRun)
			Expect(err).ToNot(HaveOccurred())
			Expect(buildRun).ToNot(BeNil())
			Expect(buildRun.Status).ToNot(BeNil())
			Expect(buildRun.Status.Output).ToNot(BeNil())

			Expect(buildRun.Status.Output.Vulnerabilities).ToNot(BeNil())
			Expect(len(buildRun.Status.Output.Vulnerabilities)).ToNot(BeZero())
		})
	})
})
